// Ensure iceHome is set prior to loading ice.gradle
apply from: "$rootProject.projectDir/gradle/db.gradle"

ext.iceHome = iceHome ? iceHome : System.env.ICE_HOME
ext.freezeHome = freezeHome ? freezeHome : System.env.FREEZE_HOME
if(isWindows)
{
    ext.iceHome = iceHome ? iceHome : "${rootProject.projectDir}/packages/zeroc.ice.v140.${iceVersion}"
    ext.freezeHome = freezeHome ? freezeHome : "${rootProject.projectDir}/packages/zeroc.freeze.v140.${iceVersion}"

    if(!new File("${iceHome}\\tools\\slice2java.exe").exists() &&
       !new File("${iceHome}\\bin\\slice2java.exe").exists() &&
       !new File("${iceHome}\\cpp\\bin\\${cppPlatform}\\${cppConfiguration}\\slice2java.exe").exists())
    {
        throw new GradleException("Unable to locate slice2java compiler in ${iceHome}")
    }

    if(!new File("${freezeHome}\\tools\\slice2freezej.exe").exists() &&
       !new File("${freezeHome}\\cpp\\bin\\${cppPlatform}\\${cppConfiguration}\\slice2freezej.exe").exists())
    {
        throw new GradleException("Unable to locate slice2freezej compiler in ${freezeHome}")
    }
}
else
{
    ext.iceHome = iceHome ? iceHome : isMacOS ? "/usr/local" : "/usr"
    ext.freezeHome = freezeHome ? freezeHome : isMacOS ? "/usr/local" : "/usr"

    if(!new File("${iceHome}/bin/slice2java").exists() &&
       !new File("${iceHome}/cpp/bin/slice2java").exists())
    {
        throw new GradleException("Unable to locate slice2java compiler in ${iceHome}")
    }

    if(!new File("${freezeHome}/bin/slice2freezej").exists() &&
       !new File("${freezeHome}/cpp/bin/slice2freezej").exists())
    {
        throw new GradleException("Unable to locate slice2freezej compiler in ${freezeHome}")
    }
}

apply from: "${rootProject.projectDir}/../../ice/java/gradle/ice.gradle"

slice {
    freezeHome = this.freezeHome
    iceHome = this.iceHome
    compat = true
}

ext.demoJar = { name ->
    def taskName = name + "Jar"
    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: taskName, type: Jar) {
        version = ""
        baseName = name
        from(sourceSets.main.output) {
            include "**"
        }
    }
    jarTask.manifest {
        attributes("Main-Class": name.capitalize())
        attributes("Class-Path": configurations.runtime.resolve().collect { it.toURI() }.join(' '))
    }
    artifacts {
        archives jarTask
    }
}
