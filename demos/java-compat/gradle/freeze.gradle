// Ensure iceHome is set prior to loading ice.gradle
apply from: "$rootProject.projectDir/gradle/db.gradle"

ext.iceHome = iceHome ? iceHome : System.env.ICE_HOME
ext.freezeHome = freezeHome ? freezeHome : System.env.FREEZE_HOME
if (isWindows) {
    ext.iceHome = iceHome ? iceHome : "${rootProject.projectDir}/packages/zeroc.ice.v140.${iceVersion}"
    ext.freezeHome = freezeHome ? freezeHome : "${rootProject.projectDir}/packages/zeroc.freeze.v140.${iceVersion}"

    if (!new File("${iceHome}\\tools\\slice2java.exe").exists() &&
        !new File("${iceHome}\\bin\\slice2java.exe").exists() &&
        !new File("${iceHome}\\cpp\\bin\\${cppPlatform}\\${cppConfiguration}\\slice2java.exe").exists()) {
        throw new GradleException("Unable to locate slice2java compiler in ${iceHome}")
    }

    if (!new File("${freezeHome}\\tools\\slice2freezej.exe").exists() &&
        !new File("${freezeHome}\\cpp\\bin\\${cppPlatform}\\${cppConfiguration}\\slice2freezej.exe").exists()){
        throw new GradleException("Unable to locate slice2freezej compiler in ${freezeHome}")
    }
} else {
    ext.iceHome = iceHome ? iceHome : isMacOS ? "/usr/local" : "/usr"
    ext.freezeHome = freezeHome ? freezeHome : isMacOS ? "/usr/local" : "/usr"

    if (!new File("${iceHome}/bin/slice2java").exists() &&
        !new File("${iceHome}/cpp/bin/slice2java").exists()) {
        throw new GradleException("Unable to locate slice2java compiler in ${iceHome}")
    }

    if (!new File("${freezeHome}/bin/slice2freezej").exists() &&
        !new File("${freezeHome}/cpp/bin/slice2freezej").exists()) {
        throw new GradleException("Unable to locate slice2freezej compiler in ${freezeHome}")
    }
}

buildscript {
    //
    // If iceBuilderHome is set add its lib directory it to the local maven repositories
    // so we can build using a local plugin version
    //
    if (iceBuilderHome) {
        def builder  = new File([iceBuilderHome, "build", "libs"].join(File.separator))
        if (builder.exists()) {
            repositories {
                flatDir dirs: "file://${builder.getCanonicalPath()}"
            }
        }
    }

    if (new File("/usr/share/maven-repo").exists()) {
        repositories {
            maven {
                url "file:///usr/share/maven-repo"
            }
        }
    }

    repositories {
        mavenCentral()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: "${iceBuilderClassPath}", name: 'slice', version: "${iceBuilderVersion}"
    }
}

//
// We do not use the new gradle Plugin DSL because on debian we want to use the plug-in
// from gradle-ice-builder-plugin package and this is not possible when using gradle 3.2
// included in stretch and the Plugin DSL.
//
if (!project.plugins.findPlugin(com.zeroc.gradle.icebuilder.slice.SlicePlugin)) {
    project.apply(plugin: com.zeroc.gradle.icebuilder.slice.SlicePlugin)
}

slice {
    freezeHome = project.freezeHome
    iceHome = project.iceHome
    compat = true
}

ext.demoJar = { name ->
    def taskName = name + "Jar"
    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: taskName, type: Jar) {
        version = ""
        baseName = name
        from(sourceSets.main.output) {
            include "**"
        }
    }
    jarTask.manifest {
        attributes("Main-Class": name.capitalize())
        attributes("Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' '))
    }
    artifacts {
        archives jarTask
    }
}
